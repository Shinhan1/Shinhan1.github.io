{"componentChunkName":"component---src-templates-docs-js","path":"/codeblock/MergeSort","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/Sn-Hn/gatsby-gitbook-starter/tree/master/content"}},"mdx":{"fields":{"id":"d5e549f0-a262-5e44-b599-a56e4326f374","title":"정렬 - 병합 정렬","slug":"/codeblock/MergeSort"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"정렬 - 병합 정렬\",\n  \"date\": \"2020-07-03 18:47:58 -0400\",\n  \"categories\": \"sort\",\n  \"metaTitle\": \"Syntax Highlighting is the meta title tag for this page\",\n  \"metaDescription\": \"This is the meta description for this page\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\uD569\\uBCD1\\uC815\\uB82C \\uBCD1\\uD569\\uC815\\uB82C (Merge Sort)\"), mdx(\"p\", null, \"\\uD558\\uB098\\uC758 \\uB9AC\\uC2A4\\uD2B8\\uB97C \\uB450 \\uAC1C\\uC758 \\uADE0\\uB4F1\\uD55C \\uD06C\\uAE30\\uB85C \\uBD84\\uD560\\uD558\\uACE0 \\uBD84\\uD560\\uB41C \\uBD80\\uBD84 \\uB9AC\\uC2A4\\uD2B8\\uB97C \\uC815\\uB82C\\uD55C \\uB2E4\\uC74C,\\n\\uB450 \\uAC1C\\uC758 \\uC815\\uB82C\\uB41C \\uBD80\\uBD84 \\uB9AC\\uC2A4\\uD2B8\\uB97C \\uD569\\uD558\\uC5EC \\uC804\\uCCB4\\uAC00 \\uC815\\uB82C\\uB41C \\uB9AC\\uC2A4\\uD2B8\\uAC00 \\uB418\\uAC8C \\uD558\\uB294 \\uBC29\\uBC95\\uC774\\uB2E4.\\n\\uD569\\uBCD1 \\uC815\\uB82C\\uC740 \\uB2E4\\uC74C\\uC758 \\uB2E8\\uACC4\\uB4E4\\uB85C \\uC774\\uB8E8\\uC5B4\\uC9C4\\uB2E4.\\n\\uBD84\\uD560(Divide): \\uC785\\uB825 \\uBC30\\uC5F4\\uC744 \\uAC19\\uC740 \\uD06C\\uAE30\\uC758 2\\uAC1C\\uC758 \\uBD80\\uBD84 \\uBC30\\uC5F4\\uB85C \\uBD84\\uD560\\uD55C\\uB2E4.\\n\\uC815\\uBCF5(Conquer): \\uBD80\\uBD84 \\uBC30\\uC5F4\\uC744 \\uC815\\uB82C\\uD55C\\uB2E4. \\uBD80\\uBD84 \\uBC30\\uC5F4\\uC758 \\uD06C\\uAE30\\uAC00 \\uCDA9\\uBD84\\uD788 \\uC791\\uC9C0 \\uC54A\\uC73C\\uBA74 \\uC21C\\uD658 \\uD638\\uCD9C \\uC744 \\uC774\\uC6A9\\uD558\\uC5EC \\uB2E4\\uC2DC \\uBD84\\uD560 \\uC815\\uBCF5 \\uBC29\\uBC95\\uC744 \\uC801\\uC6A9\\uD55C\\uB2E4.\\n\\uACB0\\uD569(Combine): \\uC815\\uB82C\\uB41C \\uBD80\\uBD84 \\uBC30\\uC5F4\\uB4E4\\uC744 \\uD558\\uB098\\uC758 \\uBC30\\uC5F4\\uC5D0 \\uD569\\uBCD1\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"public class Merge_sort {\\n  static int[] sorted = new int[8];\\n  public static void merge(int[] a, int m, int middle, int n) {\\n      int i = m;             // \\uCCAB \\uBC88\\uC9F8 \\uBD80\\uBD84\\uC9D1\\uD569\\uC758 \\uC2DC\\uC791 \\uC704\\uCE58 \\uC124\\uC815\\n      int j = middle+1;      // \\uB450 \\uBC88\\uC9F8 \\uBD80\\uBD84\\uC9D1\\uD569\\uC758 \\uC2DC\\uC791 \\uC704\\uCE58 \\uC124\\uC815\\n      int k = m;             // \\uBC30\\uC5F4 sorted\\uC5D0 \\uC815\\uB82C\\uB41C \\uC6D0\\uC18C\\uB97C \\uC800\\uC7A5\\uD560 \\uC704\\uCE58 \\uC124\\uC815\\n\\n      while(i<=middle && j<=n) {\\n          if(a[i]<=a[j]) {\\n              sorted[k] = a[i];\\n              i++;\\n          }else {\\n              sorted[k] = a[j];\\n              j++;\\n          }\\n          k++;\\n      }\\n      if(i>middle) {\\n          for(int t=j;t<=n;t++,k++) {\\n              sorted[k] = a[t];\\n          }\\n      }else {\\n          for(int t=i;t<=middle;t++,k++) {\\n              sorted[k] = a[t];\\n          }\\n      }\\n\\n      for(int t=m;t<=n;t++) {\\n          a[t] = sorted[t];\\n      }\\n      System.out.println(\\\"\\uBCD1\\uD569 \\uC815\\uB82C \\uD6C4: \\\"+Arrays.toString(a));\\n  }\\n\\n  public static void mergeSort(int a[], int m, int n) {\\n      int middle;\\n      if(m<n) {\\n          middle = (m+n)/2;\\n          mergeSort(a, m, middle);    // \\uC55E \\uBD80\\uBD84\\uC5D0 \\uB300\\uD55C \\uBD84\\uD560 \\uC791\\uC5C5 \\uC218\\uD589\\n          mergeSort(a, middle+1, n);    // \\uB4B7 \\uBD80\\uBD84\\uC5D0 \\uB300\\uD55C \\uBD84\\uD560 \\uC791\\uC5C5 \\uC218\\uD589\\n          merge(a, m, middle, n);        // \\uBD80\\uBD84\\uC9D1\\uD569\\uC5D0 \\uB300\\uD558\\uC5EC \\uC815\\uB82C\\uACFC \\uBCD1\\uD569 \\uC791\\uC5C5 \\uC218\\uD589\\n      }\\n  }\\n\\n    public static void main(String[] args) {\\n      int[] arr = {5, 3, 4, 2, 1, 7, 12, 1341,1561, 15};\\n      int[] list = {58,8,28,3,18,6,33,20};\\n      int size = list.length;\\n      System.out.println(\\\"\\uC815\\uB82C \\uC218\\uD589 \\uC804: \\\"+Arrays.toString(list));\\n      System.out.println(\\\"-----------------\\uBCD1\\uD569 \\uC815\\uB82C \\uC218\\uD589 \\uC2DC\\uC791------------------\\\");\\n      mergeSort(list, 0, size-1);\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#합병정렬-병합정렬-merge-sort","title":"합병정렬 병합정렬 (Merge Sort)"}]},"parent":{"__typename":"File","relativePath":"codeblock/MergeSort.md"},"frontmatter":{"metaTitle":"Syntax Highlighting is the meta title tag for this page","metaDescription":"This is the meta description for this page"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"gatsby 블로그"}}},{"node":{"fields":{"slug":"/codeblock/BubbleSort","title":"정렬 - 버블 정렬"}}},{"node":{"fields":{"slug":"/codeblock/InsectionSort","title":"정렬 - 삽입 정렬"}}},{"node":{"fields":{"slug":"/codeblock/MergeSort","title":"정렬 - 병합 정렬"}}},{"node":{"fields":{"slug":"/codeblock/QuickSort","title":"정렬 - 퀵 정렬"}}},{"node":{"fields":{"slug":"/codeblock/완주하지 못한 선수","title":"프로그래머스 - 완주하지 못한 선수"}}},{"node":{"fields":{"slug":"/introduction","title":"소개"}}},{"node":{"fields":{"slug":"/codeblock","title":"알고리즘"}}},{"node":{"fields":{"slug":"/codeblock/키패드 누르기","title":"프로그래머스 - [카카오 인턴] 키패드 누르기"}}},{"node":{"fields":{"slug":"/codeblock/멀쩡한 사각형","title":"프로그래머스 - [Summer/Winter Coding(2019)] 멀쩡한 사각형"}}},{"node":{"fields":{"slug":"/codeblock/124나라의 숫자","title":"프로그래머스 - 124 나라의 숫자"}}}]}},"pageContext":{"id":"d5e549f0-a262-5e44-b599-a56e4326f374"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}